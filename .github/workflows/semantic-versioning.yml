name: Tag-Only Semantic Versioning

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  analyze-commits:
    runs-on: ubuntu-latest
    outputs:
      should-bump: ${{ steps.analyze.outputs.should-bump }}
      bump-type: ${{ steps.analyze.outputs.bump-type }}
      new-version: ${{ steps.analyze.outputs.new-version }}
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Analyze commits
      id: analyze
      run: |
        echo "Analyzing conventional commits..."
        
        # Check if the latest commit is a merge or already tagged
        latest_commit=$(git log -1 --pretty=format:"%s")
        if git tag --points-at HEAD | grep -q "v"; then
          echo "Skipping: Current commit already has a version tag"
          echo "should-bump=false" >> $GITHUB_OUTPUT
          echo "bump-type=none" >> $GITHUB_OUTPUT
          exit 0
        fi
        
        # Run analysis
        bump_type=$(python3 utils/semver.py analyze 2>/dev/null | grep "Recommended version bump:" | awk '{print $4}')
        
        if [ "$bump_type" != "none" ] && [ -n "$bump_type" ]; then
          # Calculate what the new version would be
          current_version=$(python3 utils/semver.py version | head -1 | awk '{print $3}')
          echo "Current version: $current_version"
          echo "Bump type: $bump_type"
          
          echo "should-bump=true" >> $GITHUB_OUTPUT
          echo "bump-type=$bump_type" >> $GITHUB_OUTPUT
          echo "new-version=will-be-calculated" >> $GITHUB_OUTPUT
        else
          echo "should-bump=false" >> $GITHUB_OUTPUT
          echo "bump-type=none" >> $GITHUB_OUTPUT
        fi

  create-tag:
    needs: analyze-commits
    runs-on: ubuntu-latest
    if: needs.analyze-commits.outputs.should-bump == 'true' && github.event_name == 'push'
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Configure Git
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
    
    - name: Create version tag
      run: |
        echo "Creating version tag for: ${{ needs.analyze-commits.outputs.bump-type }}"
        
        # Use the consolidated semver script
        python3 utils/semver.py auto
        
        # Push the tag
        git push origin --tags
        
        echo "‚úÖ Version tag created and pushed!"

  validate-commits:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Validate conventional commits
      run: |
        echo "Validating conventional commits in PR..."
        
        base_sha="${{ github.event.pull_request.base.sha }}"
        head_sha="${{ github.event.pull_request.head.sha }}"
        
        commits=$(git log --pretty=format:"%s" "$base_sha..$head_sha")
        
        echo "$commits" | while IFS= read -r commit; do
          if [[ "$commit" =~ ^(feat|fix|docs|style|refactor|perf|test|chore|build|ci|epoch)(\(.+\))?!?:.+ ]]; then
            echo "‚úÖ Valid: $commit"
          else
            echo "‚ùå Invalid conventional commit: $commit"
            echo "Please use format: type(scope): description"
            exit 1
          fi
        done
        
        # Show what version bump this PR would create
        echo ""
        echo "üìä Version Impact Analysis:"
        python3 utils/semver.py analyze
